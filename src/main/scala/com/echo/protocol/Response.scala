// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.echo.protocol



@SerialVersionUID(0L)
final case class Response(
    result: com.echo.protocol.Response.ResultCode = com.echo.protocol.Response.ResultCode.EMPTY,
    errorDescription: String = "",
    content: com.echo.protocol.Response.Content = com.echo.protocol.Response.Content.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Response] with com.trueaccord.lenses.Updatable[Response] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (result != com.echo.protocol.Response.ResultCode.EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, result.value) }
      if (errorDescription != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, errorDescription) }
      if (content.signupResponse.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(content.signupResponse.get.serializedSize) + content.signupResponse.get.serializedSize }
      if (content.loginResponse.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(content.loginResponse.get.serializedSize) + content.loginResponse.get.serializedSize }
      if (content.authenticationResponse.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(content.authenticationResponse.get.serializedSize) + content.authenticationResponse.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = result
        if (__v != com.echo.protocol.Response.ResultCode.EMPTY) {
          output.writeEnum(1, __v.value)
        }
      };
      {
        val __v = errorDescription
        if (__v != "") {
          output.writeString(2, __v)
        }
      };
      content.signupResponse.foreach { __v => 
        output.writeTag(1001, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      content.loginResponse.foreach { __v => 
        output.writeTag(1002, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      content.authenticationResponse.foreach { __v => 
        output.writeTag(1003, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): com.echo.protocol.Response = {
      var __result = this.result
      var __errorDescription = this.errorDescription
      var __content = this.content
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __result = com.echo.protocol.Response.ResultCode.fromValue(__input.readEnum())
          case 18 =>
            __errorDescription = __input.readString()
          case 8010 =>
            __content = com.echo.protocol.Response.Content.SignupResponse(com.trueaccord.scalapb.LiteParser.readMessage(__input, content.signupResponse.getOrElse(com.echo.protocol.Response.SignupResponse.defaultInstance)))
          case 8018 =>
            __content = com.echo.protocol.Response.Content.LoginResponse(com.trueaccord.scalapb.LiteParser.readMessage(__input, content.loginResponse.getOrElse(com.echo.protocol.Response.LoginResponse.defaultInstance)))
          case 8026 =>
            __content = com.echo.protocol.Response.Content.AuthenticationResponse(com.trueaccord.scalapb.LiteParser.readMessage(__input, content.authenticationResponse.getOrElse(com.echo.protocol.Response.AuthenticationResponse.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      com.echo.protocol.Response(
          result = __result,
          errorDescription = __errorDescription,
          content = __content
      )
    }
    def withResult(__v: com.echo.protocol.Response.ResultCode): Response = copy(result = __v)
    def withErrorDescription(__v: String): Response = copy(errorDescription = __v)
    def getSignupResponse: com.echo.protocol.Response.SignupResponse = content.signupResponse.getOrElse(com.echo.protocol.Response.SignupResponse.defaultInstance)
    def withSignupResponse(__v: com.echo.protocol.Response.SignupResponse): Response = copy(content = com.echo.protocol.Response.Content.SignupResponse(__v))
    def getLoginResponse: com.echo.protocol.Response.LoginResponse = content.loginResponse.getOrElse(com.echo.protocol.Response.LoginResponse.defaultInstance)
    def withLoginResponse(__v: com.echo.protocol.Response.LoginResponse): Response = copy(content = com.echo.protocol.Response.Content.LoginResponse(__v))
    def getAuthenticationResponse: com.echo.protocol.Response.AuthenticationResponse = content.authenticationResponse.getOrElse(com.echo.protocol.Response.AuthenticationResponse.defaultInstance)
    def withAuthenticationResponse(__v: com.echo.protocol.Response.AuthenticationResponse): Response = copy(content = com.echo.protocol.Response.Content.AuthenticationResponse(__v))
    def clearContent: Response = copy(content = com.echo.protocol.Response.Content.Empty)
    def withContent(__v: com.echo.protocol.Response.Content): Response = copy(content = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = result.valueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = errorDescription
          if (__t != "") __t else null
        }
        case 1001 => content.signupResponse.getOrElse(null)
        case 1002 => content.loginResponse.getOrElse(null)
        case 1003 => content.authenticationResponse.getOrElse(null)
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.echo.protocol.Response
}

object Response extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.Response = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.echo.protocol.Response(
      com.echo.protocol.Response.ResultCode.fromValue(__fieldsMap.getOrElse(__fields.get(0), com.echo.protocol.Response.ResultCode.EMPTY.valueDescriptor).asInstanceOf[com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      content = __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[com.echo.protocol.Response.SignupResponse]].map(com.echo.protocol.Response.Content.SignupResponse(_)) orElse
__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[com.echo.protocol.Response.LoginResponse]].map(com.echo.protocol.Response.Content.LoginResponse(_)) orElse
__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[com.echo.protocol.Response.AuthenticationResponse]].map(com.echo.protocol.Response.Content.AuthenticationResponse(_)) getOrElse com.echo.protocol.Response.Content.Empty
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ProtocolComEchoProtocolProto.descriptor.getMessageTypes.get(1)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 1001 => __out = com.echo.protocol.Response.SignupResponse
      case 1002 => __out = com.echo.protocol.Response.LoginResponse
      case 1003 => __out = com.echo.protocol.Response.AuthenticationResponse
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    __field.getNumber match {
      case 1 => com.echo.protocol.Response.ResultCode
    }
  }
  lazy val defaultInstance = com.echo.protocol.Response(
  )
  sealed trait ResultCode extends com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = ResultCode
    def isEmpty: Boolean = false
    def isSuccess: Boolean = false
    def isFail: Boolean = false
    def isUnrecognized: Boolean = false
    def companion: com.trueaccord.scalapb.GeneratedEnumCompanion[ResultCode] = ResultCode
  }
  
  object ResultCode extends com.trueaccord.scalapb.GeneratedEnumCompanion[ResultCode] {
    implicit def enumCompanion: com.trueaccord.scalapb.GeneratedEnumCompanion[ResultCode] = this
    @SerialVersionUID(0L)
    case object EMPTY extends ResultCode {
      val value = 0
      val index = 0
      val name = "EMPTY"
      override def isEmpty: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SUCCESS extends ResultCode {
      val value = 1
      val index = 1
      val name = "SUCCESS"
      override def isSuccess: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FAIL extends ResultCode {
      val value = 2
      val index = 2
      val name = "FAIL"
      override def isFail: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends ResultCode {
      val name = "UNRECOGNIZED"
      val index = -1
      override def isUnrecognized: Boolean = true
    }
    
    lazy val values = Seq(EMPTY, SUCCESS, FAIL)
    def fromValue(value: Int): ResultCode = value match {
      case 0 => EMPTY
      case 1 => SUCCESS
      case 2 => FAIL
      case __other => Unrecognized(__other)
    }
    def descriptor: com.google.protobuf.Descriptors.EnumDescriptor = com.echo.protocol.Response.descriptor.getEnumTypes.get(0)
  }
  sealed trait Content extends com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def number: Int
    def isSignupResponse: Boolean = false
    def isLoginResponse: Boolean = false
    def isAuthenticationResponse: Boolean = false
    def signupResponse: scala.Option[com.echo.protocol.Response.SignupResponse] = None
    def loginResponse: scala.Option[com.echo.protocol.Response.LoginResponse] = None
    def authenticationResponse: scala.Option[com.echo.protocol.Response.AuthenticationResponse] = None
  }
  object Content extends {
    @SerialVersionUID(0L)
    case object Empty extends Content {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
    }
  
    @SerialVersionUID(0L)
    case class SignupResponse(value: com.echo.protocol.Response.SignupResponse) extends Content {
      override def isSignupResponse: Boolean = true
      override def signupResponse: scala.Option[com.echo.protocol.Response.SignupResponse] = Some(value)
      override def number: Int = 1001
    }
    @SerialVersionUID(0L)
    case class LoginResponse(value: com.echo.protocol.Response.LoginResponse) extends Content {
      override def isLoginResponse: Boolean = true
      override def loginResponse: scala.Option[com.echo.protocol.Response.LoginResponse] = Some(value)
      override def number: Int = 1002
    }
    @SerialVersionUID(0L)
    case class AuthenticationResponse(value: com.echo.protocol.Response.AuthenticationResponse) extends Content {
      override def isAuthenticationResponse: Boolean = true
      override def authenticationResponse: scala.Option[com.echo.protocol.Response.AuthenticationResponse] = Some(value)
      override def number: Int = 1003
    }
  }
  @SerialVersionUID(0L)
  final case class SignupResponse(
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SignupResponse] with com.trueaccord.lenses.Updatable[SignupResponse] {
      @transient
      lazy val serializedSize: Int = {
        var __size = 0
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): com.echo.protocol.Response.SignupResponse = {
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case tag => __input.skipField(tag)
          }
        }
        com.echo.protocol.Response.SignupResponse(
        )
      }
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = throw new MatchError(__field)
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.echo.protocol.Response.SignupResponse
  }
  
  object SignupResponse extends com.trueaccord.scalapb.GeneratedMessageCompanion[SignupResponse] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[SignupResponse] = this
    def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.Response.SignupResponse = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      com.echo.protocol.Response.SignupResponse(
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = com.echo.protocol.Response.descriptor.getNestedTypes.get(0)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
    lazy val defaultInstance = com.echo.protocol.Response.SignupResponse(
    )
    implicit class SignupResponseLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, SignupResponse]) extends com.trueaccord.lenses.ObjectLens[UpperPB, SignupResponse](_l) {
    }
  }
  
  @SerialVersionUID(0L)
  final case class LoginResponse(
      token: String = "",
      expiresIn: Int = 0,
      userId: String = ""
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[LoginResponse] with com.trueaccord.lenses.Updatable[LoginResponse] {
      @transient
      lazy val serializedSize: Int = {
        var __size = 0
        if (token != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, token) }
        if (expiresIn != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, expiresIn) }
        if (userId != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, userId) }
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = token
          if (__v != "") {
            output.writeString(1, __v)
          }
        };
        {
          val __v = expiresIn
          if (__v != 0) {
            output.writeInt32(2, __v)
          }
        };
        {
          val __v = userId
          if (__v != "") {
            output.writeString(3, __v)
          }
        };
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): com.echo.protocol.Response.LoginResponse = {
        var __token = this.token
        var __expiresIn = this.expiresIn
        var __userId = this.userId
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __token = __input.readString()
            case 16 =>
              __expiresIn = __input.readInt32()
            case 26 =>
              __userId = __input.readString()
            case tag => __input.skipField(tag)
          }
        }
        com.echo.protocol.Response.LoginResponse(
            token = __token,
            expiresIn = __expiresIn,
            userId = __userId
        )
      }
      def withToken(__v: String): LoginResponse = copy(token = __v)
      def withExpiresIn(__v: Int): LoginResponse = copy(expiresIn = __v)
      def withUserId(__v: String): LoginResponse = copy(userId = __v)
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
        __field.getNumber match {
          case 1 => {
            val __t = token
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = expiresIn
            if (__t != 0) __t else null
          }
          case 3 => {
            val __t = userId
            if (__t != "") __t else null
          }
        }
      }
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.echo.protocol.Response.LoginResponse
  }
  
  object LoginResponse extends com.trueaccord.scalapb.GeneratedMessageCompanion[LoginResponse] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[LoginResponse] = this
    def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.Response.LoginResponse = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      com.echo.protocol.Response.LoginResponse(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
        __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
        __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String]
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = com.echo.protocol.Response.descriptor.getNestedTypes.get(1)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
    lazy val defaultInstance = com.echo.protocol.Response.LoginResponse(
    )
    implicit class LoginResponseLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, LoginResponse]) extends com.trueaccord.lenses.ObjectLens[UpperPB, LoginResponse](_l) {
      def token: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.token)((c_, f_) => c_.copy(token = f_))
      def expiresIn: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.expiresIn)((c_, f_) => c_.copy(expiresIn = f_))
      def userId: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    }
    final val TOKEN_FIELD_NUMBER = 1
    final val EXPIRES_IN_FIELD_NUMBER = 2
    final val USER_ID_FIELD_NUMBER = 3
  }
  
  @SerialVersionUID(0L)
  final case class AuthenticationResponse(
      isExpired: Boolean = false,
      expiresIn: Int = 0,
      token: String = "",
      userId: String = ""
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AuthenticationResponse] with com.trueaccord.lenses.Updatable[AuthenticationResponse] {
      @transient
      lazy val serializedSize: Int = {
        var __size = 0
        if (isExpired != false) { __size += com.google.protobuf.CodedOutputStream.computeBoolSize(1, isExpired) }
        if (expiresIn != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, expiresIn) }
        if (token != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, token) }
        if (userId != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(4, userId) }
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = isExpired
          if (__v != false) {
            output.writeBool(1, __v)
          }
        };
        {
          val __v = expiresIn
          if (__v != 0) {
            output.writeInt32(2, __v)
          }
        };
        {
          val __v = token
          if (__v != "") {
            output.writeString(3, __v)
          }
        };
        {
          val __v = userId
          if (__v != "") {
            output.writeString(4, __v)
          }
        };
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): com.echo.protocol.Response.AuthenticationResponse = {
        var __isExpired = this.isExpired
        var __expiresIn = this.expiresIn
        var __token = this.token
        var __userId = this.userId
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __isExpired = __input.readBool()
            case 16 =>
              __expiresIn = __input.readInt32()
            case 26 =>
              __token = __input.readString()
            case 34 =>
              __userId = __input.readString()
            case tag => __input.skipField(tag)
          }
        }
        com.echo.protocol.Response.AuthenticationResponse(
            isExpired = __isExpired,
            expiresIn = __expiresIn,
            token = __token,
            userId = __userId
        )
      }
      def withIsExpired(__v: Boolean): AuthenticationResponse = copy(isExpired = __v)
      def withExpiresIn(__v: Int): AuthenticationResponse = copy(expiresIn = __v)
      def withToken(__v: String): AuthenticationResponse = copy(token = __v)
      def withUserId(__v: String): AuthenticationResponse = copy(userId = __v)
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
        __field.getNumber match {
          case 1 => {
            val __t = isExpired
            if (__t != false) __t else null
          }
          case 2 => {
            val __t = expiresIn
            if (__t != 0) __t else null
          }
          case 3 => {
            val __t = token
            if (__t != "") __t else null
          }
          case 4 => {
            val __t = userId
            if (__t != "") __t else null
          }
        }
      }
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.echo.protocol.Response.AuthenticationResponse
  }
  
  object AuthenticationResponse extends com.trueaccord.scalapb.GeneratedMessageCompanion[AuthenticationResponse] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[AuthenticationResponse] = this
    def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.Response.AuthenticationResponse = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      com.echo.protocol.Response.AuthenticationResponse(
        __fieldsMap.getOrElse(__fields.get(0), false).asInstanceOf[Boolean],
        __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
        __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String],
        __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String]
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = com.echo.protocol.Response.descriptor.getNestedTypes.get(2)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
    lazy val defaultInstance = com.echo.protocol.Response.AuthenticationResponse(
    )
    implicit class AuthenticationResponseLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, AuthenticationResponse]) extends com.trueaccord.lenses.ObjectLens[UpperPB, AuthenticationResponse](_l) {
      def isExpired: com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.isExpired)((c_, f_) => c_.copy(isExpired = f_))
      def expiresIn: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.expiresIn)((c_, f_) => c_.copy(expiresIn = f_))
      def token: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.token)((c_, f_) => c_.copy(token = f_))
      def userId: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    }
    final val IS_EXPIRED_FIELD_NUMBER = 1
    final val EXPIRES_IN_FIELD_NUMBER = 2
    final val TOKEN_FIELD_NUMBER = 3
    final val USER_ID_FIELD_NUMBER = 4
  }
  
  implicit class ResponseLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Response]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Response](_l) {
    def result: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.Response.ResultCode] = field(_.result)((c_, f_) => c_.copy(result = f_))
    def errorDescription: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.errorDescription)((c_, f_) => c_.copy(errorDescription = f_))
    def signupResponse: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.Response.SignupResponse] = field(_.getSignupResponse)((c_, f_) => c_.copy(content = com.echo.protocol.Response.Content.SignupResponse(f_)))
    def loginResponse: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.Response.LoginResponse] = field(_.getLoginResponse)((c_, f_) => c_.copy(content = com.echo.protocol.Response.Content.LoginResponse(f_)))
    def authenticationResponse: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.Response.AuthenticationResponse] = field(_.getAuthenticationResponse)((c_, f_) => c_.copy(content = com.echo.protocol.Response.Content.AuthenticationResponse(f_)))
    def content: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.Response.Content] = field(_.content)((c_, f_) => c_.copy(content = f_))
  }
  final val RESULT_FIELD_NUMBER = 1
  final val ERROR_DESCRIPTION_FIELD_NUMBER = 2
  final val SIGNUP_RESPONSE_FIELD_NUMBER = 1001
  final val LOGIN_RESPONSE_FIELD_NUMBER = 1002
  final val AUTHENTICATION_RESPONSE_FIELD_NUMBER = 1003
}
