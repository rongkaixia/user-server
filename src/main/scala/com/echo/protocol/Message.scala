// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.echo.protocol



@SerialVersionUID(0L)
final case class Message(
    msgType: com.echo.protocol.MsgType = com.echo.protocol.MsgType.MSG_TYPE_EMPTY,
    body: com.echo.protocol.Message.Body = com.echo.protocol.Message.Body.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Message] with com.trueaccord.lenses.Updatable[Message] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (msgType != com.echo.protocol.MsgType.MSG_TYPE_EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, msgType.value) }
      if (body.request.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(body.request.get.serializedSize) + body.request.get.serializedSize }
      if (body.response.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(body.response.get.serializedSize) + body.response.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = msgType
        if (__v != com.echo.protocol.MsgType.MSG_TYPE_EMPTY) {
          output.writeEnum(1, __v.value)
        }
      };
      body.request.foreach { __v => 
        output.writeTag(1001, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      body.response.foreach { __v => 
        output.writeTag(1002, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): com.echo.protocol.Message = {
      var __msgType = this.msgType
      var __body = this.body
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __msgType = com.echo.protocol.MsgType.fromValue(__input.readEnum())
          case 8010 =>
            __body = com.echo.protocol.Message.Body.Request(com.trueaccord.scalapb.LiteParser.readMessage(__input, body.request.getOrElse(com.echo.protocol.Request.defaultInstance)))
          case 8018 =>
            __body = com.echo.protocol.Message.Body.Response(com.trueaccord.scalapb.LiteParser.readMessage(__input, body.response.getOrElse(com.echo.protocol.Response.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      com.echo.protocol.Message(
          msgType = __msgType,
          body = __body
      )
    }
    def withMsgType(__v: com.echo.protocol.MsgType): Message = copy(msgType = __v)
    def getRequest: com.echo.protocol.Request = body.request.getOrElse(com.echo.protocol.Request.defaultInstance)
    def withRequest(__v: com.echo.protocol.Request): Message = copy(body = com.echo.protocol.Message.Body.Request(__v))
    def getResponse: com.echo.protocol.Response = body.response.getOrElse(com.echo.protocol.Response.defaultInstance)
    def withResponse(__v: com.echo.protocol.Response): Message = copy(body = com.echo.protocol.Message.Body.Response(__v))
    def clearBody: Message = copy(body = com.echo.protocol.Message.Body.Empty)
    def withBody(__v: com.echo.protocol.Message.Body): Message = copy(body = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = msgType.valueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 1001 => body.request.getOrElse(null)
        case 1002 => body.response.getOrElse(null)
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.echo.protocol.Message
}

object Message extends com.trueaccord.scalapb.GeneratedMessageCompanion[Message] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Message] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.Message = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.echo.protocol.Message(
      com.echo.protocol.MsgType.fromValue(__fieldsMap.getOrElse(__fields.get(0), com.echo.protocol.MsgType.MSG_TYPE_EMPTY.valueDescriptor).asInstanceOf[com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      body = __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.echo.protocol.Request]].map(com.echo.protocol.Message.Body.Request(_)) orElse
__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[com.echo.protocol.Response]].map(com.echo.protocol.Message.Body.Response(_)) getOrElse com.echo.protocol.Message.Body.Empty
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ProtocolProtocolProto.descriptor.getMessageTypes.get(4)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 1001 => __out = com.echo.protocol.Request
      case 1002 => __out = com.echo.protocol.Response
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    __field.getNumber match {
      case 1 => com.echo.protocol.MsgType
    }
  }
  lazy val defaultInstance = com.echo.protocol.Message(
  )
  sealed trait Body extends com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def number: Int
    def isRequest: Boolean = false
    def isResponse: Boolean = false
    def request: scala.Option[com.echo.protocol.Request] = None
    def response: scala.Option[com.echo.protocol.Response] = None
  }
  object Body extends {
    @SerialVersionUID(0L)
    case object Empty extends Body {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
    }
  
    @SerialVersionUID(0L)
    case class Request(value: com.echo.protocol.Request) extends Body {
      override def isRequest: Boolean = true
      override def request: scala.Option[com.echo.protocol.Request] = Some(value)
      override def number: Int = 1001
    }
    @SerialVersionUID(0L)
    case class Response(value: com.echo.protocol.Response) extends Body {
      override def isResponse: Boolean = true
      override def response: scala.Option[com.echo.protocol.Response] = Some(value)
      override def number: Int = 1002
    }
  }
  implicit class MessageLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Message]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Message](_l) {
    def msgType: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.MsgType] = field(_.msgType)((c_, f_) => c_.copy(msgType = f_))
    def request: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.Request] = field(_.getRequest)((c_, f_) => c_.copy(body = com.echo.protocol.Message.Body.Request(f_)))
    def response: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.Response] = field(_.getResponse)((c_, f_) => c_.copy(body = com.echo.protocol.Message.Body.Response(f_)))
    def body: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.Message.Body] = field(_.body)((c_, f_) => c_.copy(body = f_))
  }
  final val MSG_TYPE_FIELD_NUMBER = 1
  final val REQUEST_FIELD_NUMBER = 1001
  final val RESPONSE_FIELD_NUMBER = 1002
}
