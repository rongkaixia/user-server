// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.echo.protocol.common



@SerialVersionUID(0L)
final case class KVField(
    key: String = "",
    value: scala.Option[com.google.protobuf.Any] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[KVField] with com.trueaccord.lenses.Updatable[KVField] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (key != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
      if (value.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(value.get.serializedSize) + value.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = key
        if (__v != "") {
          output.writeString(1, __v)
        }
      };
      value.foreach { __v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): com.echo.protocol.common.KVField = {
      var __key = this.key
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = __input.readString()
          case 18 =>
            __value = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __value.getOrElse(com.google.protobuf.Any.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      com.echo.protocol.common.KVField(
          key = __key,
          value = __value
      )
    }
    def withKey(__v: String): KVField = copy(key = __v)
    def getValue: com.google.protobuf.Any = value.getOrElse(com.google.protobuf.Any.defaultInstance)
    def clearValue: KVField = copy(value = None)
    def withValue(__v: com.google.protobuf.Any): KVField = copy(value = Some(__v))
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = key
          if (__t != "") __t else null
        }
        case 2 => value.getOrElse(null)
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.echo.protocol.common.KVField
}

object KVField extends com.trueaccord.scalapb.GeneratedMessageCompanion[KVField] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[KVField] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.common.KVField = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.echo.protocol.common.KVField(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.google.protobuf.Any]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = CommonProto.descriptor.getMessageTypes.get(1)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 2 => __out = com.google.protobuf.Any
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.echo.protocol.common.KVField(
  )
  implicit class KVFieldLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, KVField]) extends com.trueaccord.lenses.ObjectLens[UpperPB, KVField](_l) {
    def key: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def value: com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.Any] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
    def optionalValue: com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.google.protobuf.Any]] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val KEY_FIELD_NUMBER = 1
  final val VALUE_FIELD_NUMBER = 2
}
