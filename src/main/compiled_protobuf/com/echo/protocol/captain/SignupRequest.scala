// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.echo.protocol.captain



@SerialVersionUID(0L)
final case class SignupRequest(
    phonenum: String = "",
    password: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SignupRequest] with com.trueaccord.lenses.Updatable[SignupRequest] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (phonenum != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, phonenum) }
      if (password != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, password) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = phonenum
        if (__v != "") {
          output.writeString(1, __v)
        }
      };
      {
        val __v = password
        if (__v != "") {
          output.writeString(2, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): com.echo.protocol.captain.SignupRequest = {
      var __phonenum = this.phonenum
      var __password = this.password
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __phonenum = __input.readString()
          case 18 =>
            __password = __input.readString()
          case tag => __input.skipField(tag)
        }
      }
      com.echo.protocol.captain.SignupRequest(
          phonenum = __phonenum,
          password = __password
      )
    }
    def withPhonenum(__v: String): SignupRequest = copy(phonenum = __v)
    def withPassword(__v: String): SignupRequest = copy(password = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = phonenum
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = password
          if (__t != "") __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.echo.protocol.captain.SignupRequest
}

object SignupRequest extends com.trueaccord.scalapb.GeneratedMessageCompanion[SignupRequest] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[SignupRequest] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.captain.SignupRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.echo.protocol.captain.SignupRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = CaptainProto.descriptor.getMessageTypes.get(3)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.echo.protocol.captain.SignupRequest(
  )
  implicit class SignupRequestLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, SignupRequest]) extends com.trueaccord.lenses.ObjectLens[UpperPB, SignupRequest](_l) {
    def phonenum: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.phonenum)((c_, f_) => c_.copy(phonenum = f_))
    def password: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.password)((c_, f_) => c_.copy(password = f_))
  }
  final val PHONENUM_FIELD_NUMBER = 1
  final val PASSWORD_FIELD_NUMBER = 2
}
