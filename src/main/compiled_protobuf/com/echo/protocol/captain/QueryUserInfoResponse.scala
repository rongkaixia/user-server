// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.echo.protocol.captain



@SerialVersionUID(0L)
final case class QueryUserInfoResponse(
    header: scala.Option[com.echo.protocol.common.ResponseHeader] = None,
    userInfo: scala.Option[com.echo.protocol.captain.UserInfo] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[QueryUserInfoResponse] with com.trueaccord.lenses.Updatable[QueryUserInfoResponse] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (header.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(header.get.serializedSize) + header.get.serializedSize }
      if (userInfo.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(userInfo.get.serializedSize) + userInfo.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      header.foreach { __v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      userInfo.foreach { __v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): com.echo.protocol.captain.QueryUserInfoResponse = {
      var __header = this.header
      var __userInfo = this.userInfo
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __header = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __header.getOrElse(com.echo.protocol.common.ResponseHeader.defaultInstance)))
          case 18 =>
            __userInfo = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __userInfo.getOrElse(com.echo.protocol.captain.UserInfo.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      com.echo.protocol.captain.QueryUserInfoResponse(
          header = __header,
          userInfo = __userInfo
      )
    }
    def getHeader: com.echo.protocol.common.ResponseHeader = header.getOrElse(com.echo.protocol.common.ResponseHeader.defaultInstance)
    def clearHeader: QueryUserInfoResponse = copy(header = None)
    def withHeader(__v: com.echo.protocol.common.ResponseHeader): QueryUserInfoResponse = copy(header = Some(__v))
    def getUserInfo: com.echo.protocol.captain.UserInfo = userInfo.getOrElse(com.echo.protocol.captain.UserInfo.defaultInstance)
    def clearUserInfo: QueryUserInfoResponse = copy(userInfo = None)
    def withUserInfo(__v: com.echo.protocol.captain.UserInfo): QueryUserInfoResponse = copy(userInfo = Some(__v))
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => header.getOrElse(null)
        case 2 => userInfo.getOrElse(null)
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.echo.protocol.captain.QueryUserInfoResponse
}

object QueryUserInfoResponse extends com.trueaccord.scalapb.GeneratedMessageCompanion[QueryUserInfoResponse] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[QueryUserInfoResponse] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.captain.QueryUserInfoResponse = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.echo.protocol.captain.QueryUserInfoResponse(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.echo.protocol.common.ResponseHeader]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.echo.protocol.captain.UserInfo]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = CaptainProto.descriptor.getMessageTypes.get(16)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 1 => __out = com.echo.protocol.common.ResponseHeader
      case 2 => __out = com.echo.protocol.captain.UserInfo
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.echo.protocol.captain.QueryUserInfoResponse(
  )
  implicit class QueryUserInfoResponseLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, QueryUserInfoResponse]) extends com.trueaccord.lenses.ObjectLens[UpperPB, QueryUserInfoResponse](_l) {
    def header: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.common.ResponseHeader] = field(_.getHeader)((c_, f_) => c_.copy(header = Some(f_)))
    def optionalHeader: com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.echo.protocol.common.ResponseHeader]] = field(_.header)((c_, f_) => c_.copy(header = f_))
    def userInfo: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.captain.UserInfo] = field(_.getUserInfo)((c_, f_) => c_.copy(userInfo = Some(f_)))
    def optionalUserInfo: com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.echo.protocol.captain.UserInfo]] = field(_.userInfo)((c_, f_) => c_.copy(userInfo = f_))
  }
  final val HEADER_FIELD_NUMBER = 1
  final val USER_INFO_FIELD_NUMBER = 2
}
