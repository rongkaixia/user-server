// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.echo.protocol.captain



@SerialVersionUID(0L)
final case class UserInfo(
    userId: String = "",
    username: String = "",
    email: String = "",
    phonenum: String = "",
    securityQuestion1: scala.Option[com.echo.protocol.captain.SecurityQuestionPair] = None,
    securityQuestion2: scala.Option[com.echo.protocol.captain.SecurityQuestionPair] = None,
    securityQuestion3: scala.Option[com.echo.protocol.captain.SecurityQuestionPair] = None,
    addresses: Seq[com.echo.protocol.captain.UserAddress] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[UserInfo] with com.trueaccord.lenses.Updatable[UserInfo] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (userId != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, userId) }
      if (username != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, username) }
      if (email != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, email) }
      if (phonenum != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(4, phonenum) }
      if (securityQuestion1.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(securityQuestion1.get.serializedSize) + securityQuestion1.get.serializedSize }
      if (securityQuestion2.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(securityQuestion2.get.serializedSize) + securityQuestion2.get.serializedSize }
      if (securityQuestion3.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(securityQuestion3.get.serializedSize) + securityQuestion3.get.serializedSize }
      addresses.foreach(addresses => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(addresses.serializedSize) + addresses.serializedSize)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = userId
        if (__v != "") {
          output.writeString(1, __v)
        }
      };
      {
        val __v = username
        if (__v != "") {
          output.writeString(2, __v)
        }
      };
      {
        val __v = email
        if (__v != "") {
          output.writeString(3, __v)
        }
      };
      {
        val __v = phonenum
        if (__v != "") {
          output.writeString(4, __v)
        }
      };
      securityQuestion1.foreach { __v => 
        output.writeTag(5, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      securityQuestion2.foreach { __v => 
        output.writeTag(6, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      securityQuestion3.foreach { __v => 
        output.writeTag(7, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      addresses.foreach { __v => 
        output.writeTag(8, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): com.echo.protocol.captain.UserInfo = {
      var __userId = this.userId
      var __username = this.username
      var __email = this.email
      var __phonenum = this.phonenum
      var __securityQuestion1 = this.securityQuestion1
      var __securityQuestion2 = this.securityQuestion2
      var __securityQuestion3 = this.securityQuestion3
      val __addresses = (scala.collection.immutable.Vector.newBuilder[com.echo.protocol.captain.UserAddress] ++= this.addresses)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __userId = __input.readString()
          case 18 =>
            __username = __input.readString()
          case 26 =>
            __email = __input.readString()
          case 34 =>
            __phonenum = __input.readString()
          case 42 =>
            __securityQuestion1 = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __securityQuestion1.getOrElse(com.echo.protocol.captain.SecurityQuestionPair.defaultInstance)))
          case 50 =>
            __securityQuestion2 = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __securityQuestion2.getOrElse(com.echo.protocol.captain.SecurityQuestionPair.defaultInstance)))
          case 58 =>
            __securityQuestion3 = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __securityQuestion3.getOrElse(com.echo.protocol.captain.SecurityQuestionPair.defaultInstance)))
          case 66 =>
            __addresses += com.trueaccord.scalapb.LiteParser.readMessage(__input, com.echo.protocol.captain.UserAddress.defaultInstance)
          case tag => __input.skipField(tag)
        }
      }
      com.echo.protocol.captain.UserInfo(
          userId = __userId,
          username = __username,
          email = __email,
          phonenum = __phonenum,
          securityQuestion1 = __securityQuestion1,
          securityQuestion2 = __securityQuestion2,
          securityQuestion3 = __securityQuestion3,
          addresses = __addresses.result()
      )
    }
    def withUserId(__v: String): UserInfo = copy(userId = __v)
    def withUsername(__v: String): UserInfo = copy(username = __v)
    def withEmail(__v: String): UserInfo = copy(email = __v)
    def withPhonenum(__v: String): UserInfo = copy(phonenum = __v)
    def getSecurityQuestion1: com.echo.protocol.captain.SecurityQuestionPair = securityQuestion1.getOrElse(com.echo.protocol.captain.SecurityQuestionPair.defaultInstance)
    def clearSecurityQuestion1: UserInfo = copy(securityQuestion1 = None)
    def withSecurityQuestion1(__v: com.echo.protocol.captain.SecurityQuestionPair): UserInfo = copy(securityQuestion1 = Some(__v))
    def getSecurityQuestion2: com.echo.protocol.captain.SecurityQuestionPair = securityQuestion2.getOrElse(com.echo.protocol.captain.SecurityQuestionPair.defaultInstance)
    def clearSecurityQuestion2: UserInfo = copy(securityQuestion2 = None)
    def withSecurityQuestion2(__v: com.echo.protocol.captain.SecurityQuestionPair): UserInfo = copy(securityQuestion2 = Some(__v))
    def getSecurityQuestion3: com.echo.protocol.captain.SecurityQuestionPair = securityQuestion3.getOrElse(com.echo.protocol.captain.SecurityQuestionPair.defaultInstance)
    def clearSecurityQuestion3: UserInfo = copy(securityQuestion3 = None)
    def withSecurityQuestion3(__v: com.echo.protocol.captain.SecurityQuestionPair): UserInfo = copy(securityQuestion3 = Some(__v))
    def clearAddresses = copy(addresses = Seq.empty)
    def addAddresses(__vs: com.echo.protocol.captain.UserAddress*): UserInfo = addAllAddresses(__vs)
    def addAllAddresses(__vs: TraversableOnce[com.echo.protocol.captain.UserAddress]): UserInfo = copy(addresses = addresses ++ __vs)
    def withAddresses(__v: Seq[com.echo.protocol.captain.UserAddress]): UserInfo = copy(addresses = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = userId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = username
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = email
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = phonenum
          if (__t != "") __t else null
        }
        case 5 => securityQuestion1.getOrElse(null)
        case 6 => securityQuestion2.getOrElse(null)
        case 7 => securityQuestion3.getOrElse(null)
        case 8 => addresses
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.echo.protocol.captain.UserInfo
}

object UserInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[UserInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[UserInfo] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.captain.UserInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.echo.protocol.captain.UserInfo(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[com.echo.protocol.captain.SecurityQuestionPair]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[com.echo.protocol.captain.SecurityQuestionPair]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[com.echo.protocol.captain.SecurityQuestionPair]],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[Seq[com.echo.protocol.captain.UserAddress]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = CaptainProto.descriptor.getMessageTypes.get(2)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 5 => __out = com.echo.protocol.captain.SecurityQuestionPair
      case 6 => __out = com.echo.protocol.captain.SecurityQuestionPair
      case 7 => __out = com.echo.protocol.captain.SecurityQuestionPair
      case 8 => __out = com.echo.protocol.captain.UserAddress
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.echo.protocol.captain.UserInfo(
  )
  implicit class UserInfoLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, UserInfo]) extends com.trueaccord.lenses.ObjectLens[UpperPB, UserInfo](_l) {
    def userId: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def username: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.username)((c_, f_) => c_.copy(username = f_))
    def email: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.email)((c_, f_) => c_.copy(email = f_))
    def phonenum: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.phonenum)((c_, f_) => c_.copy(phonenum = f_))
    def securityQuestion1: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.captain.SecurityQuestionPair] = field(_.getSecurityQuestion1)((c_, f_) => c_.copy(securityQuestion1 = Some(f_)))
    def optionalSecurityQuestion1: com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.echo.protocol.captain.SecurityQuestionPair]] = field(_.securityQuestion1)((c_, f_) => c_.copy(securityQuestion1 = f_))
    def securityQuestion2: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.captain.SecurityQuestionPair] = field(_.getSecurityQuestion2)((c_, f_) => c_.copy(securityQuestion2 = Some(f_)))
    def optionalSecurityQuestion2: com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.echo.protocol.captain.SecurityQuestionPair]] = field(_.securityQuestion2)((c_, f_) => c_.copy(securityQuestion2 = f_))
    def securityQuestion3: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.captain.SecurityQuestionPair] = field(_.getSecurityQuestion3)((c_, f_) => c_.copy(securityQuestion3 = Some(f_)))
    def optionalSecurityQuestion3: com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.echo.protocol.captain.SecurityQuestionPair]] = field(_.securityQuestion3)((c_, f_) => c_.copy(securityQuestion3 = f_))
    def addresses: com.trueaccord.lenses.Lens[UpperPB, Seq[com.echo.protocol.captain.UserAddress]] = field(_.addresses)((c_, f_) => c_.copy(addresses = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val USERNAME_FIELD_NUMBER = 2
  final val EMAIL_FIELD_NUMBER = 3
  final val PHONENUM_FIELD_NUMBER = 4
  final val SECURITY_QUESTION1_FIELD_NUMBER = 5
  final val SECURITY_QUESTION2_FIELD_NUMBER = 6
  final val SECURITY_QUESTION3_FIELD_NUMBER = 7
  final val ADDRESSES_FIELD_NUMBER = 8
}
