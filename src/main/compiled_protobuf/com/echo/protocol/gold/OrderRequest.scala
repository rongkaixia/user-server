// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.echo.protocol.gold



/** @param payMethod
  *  支付模式
  * @param deliverMethod
  *  送货模式
  * @param recipientsName
  *  收货人
  * @param recipientsPhone
  *  电话
  * @param recipientsAddress
  *  地址
  * @param recipientsPostcode
  *  邮编
  * @param comment
  *  备注
  * @param couponId
  *   优惠券
  */
@SerialVersionUID(0L)
final case class OrderRequest(
    userId: String = "",
    items: scala.collection.Seq[com.echo.protocol.product.ItemInfo] = Nil,
    payMethod: com.echo.protocol.gold.PayMethod = com.echo.protocol.gold.PayMethod.PAY_METHOD_EMPTY,
    deliverMethod: com.echo.protocol.gold.DeliverMethod = com.echo.protocol.gold.DeliverMethod.DELIVER_METHOD_EMPTY,
    recipientsName: String = "",
    recipientsPhone: String = "",
    recipientsAddress: String = "",
    recipientsPostcode: String = "",
    comment: String = "",
    couponId: scala.collection.Seq[String] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[OrderRequest] with com.trueaccord.lenses.Updatable[OrderRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (userId != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, userId) }
      items.foreach(items => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(items.serializedSize) + items.serializedSize)
      if (payMethod != com.echo.protocol.gold.PayMethod.PAY_METHOD_EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeEnumSize(5, payMethod.value) }
      if (deliverMethod != com.echo.protocol.gold.DeliverMethod.DELIVER_METHOD_EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeEnumSize(6, deliverMethod.value) }
      if (recipientsName != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(7, recipientsName) }
      if (recipientsPhone != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(8, recipientsPhone) }
      if (recipientsAddress != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(9, recipientsAddress) }
      if (recipientsPostcode != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(10, recipientsPostcode) }
      if (comment != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(11, comment) }
      couponId.foreach(couponId => __size += com.google.protobuf.CodedOutputStream.computeStringSize(12, couponId))
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = userId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      items.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = payMethod
        if (__v != com.echo.protocol.gold.PayMethod.PAY_METHOD_EMPTY) {
          _output__.writeEnum(5, __v.value)
        }
      };
      {
        val __v = deliverMethod
        if (__v != com.echo.protocol.gold.DeliverMethod.DELIVER_METHOD_EMPTY) {
          _output__.writeEnum(6, __v.value)
        }
      };
      {
        val __v = recipientsName
        if (__v != "") {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = recipientsPhone
        if (__v != "") {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = recipientsAddress
        if (__v != "") {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = recipientsPostcode
        if (__v != "") {
          _output__.writeString(10, __v)
        }
      };
      {
        val __v = comment
        if (__v != "") {
          _output__.writeString(11, __v)
        }
      };
      couponId.foreach { __v =>
        _output__.writeString(12, __v)
      };
    }
    def mergeFrom(`_input__`: com.google.protobuf.CodedInputStream): com.echo.protocol.gold.OrderRequest = {
      var __userId = this.userId
      val __items = (scala.collection.immutable.Vector.newBuilder[com.echo.protocol.product.ItemInfo] ++= this.items)
      var __payMethod = this.payMethod
      var __deliverMethod = this.deliverMethod
      var __recipientsName = this.recipientsName
      var __recipientsPhone = this.recipientsPhone
      var __recipientsAddress = this.recipientsAddress
      var __recipientsPostcode = this.recipientsPostcode
      var __comment = this.comment
      val __couponId = (scala.collection.immutable.Vector.newBuilder[String] ++= this.couponId)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __userId = _input__.readString()
          case 18 =>
            __items += com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.echo.protocol.product.ItemInfo.defaultInstance)
          case 40 =>
            __payMethod = com.echo.protocol.gold.PayMethod.fromValue(_input__.readEnum())
          case 48 =>
            __deliverMethod = com.echo.protocol.gold.DeliverMethod.fromValue(_input__.readEnum())
          case 58 =>
            __recipientsName = _input__.readString()
          case 66 =>
            __recipientsPhone = _input__.readString()
          case 74 =>
            __recipientsAddress = _input__.readString()
          case 82 =>
            __recipientsPostcode = _input__.readString()
          case 90 =>
            __comment = _input__.readString()
          case 98 =>
            __couponId += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.echo.protocol.gold.OrderRequest(
          userId = __userId,
          items = __items.result(),
          payMethod = __payMethod,
          deliverMethod = __deliverMethod,
          recipientsName = __recipientsName,
          recipientsPhone = __recipientsPhone,
          recipientsAddress = __recipientsAddress,
          recipientsPostcode = __recipientsPostcode,
          comment = __comment,
          couponId = __couponId.result()
      )
    }
    def withUserId(__v: String): OrderRequest = copy(userId = __v)
    def clearItems = copy(items = scala.collection.Seq.empty)
    def addItems(__vs: com.echo.protocol.product.ItemInfo*): OrderRequest = addAllItems(__vs)
    def addAllItems(__vs: TraversableOnce[com.echo.protocol.product.ItemInfo]): OrderRequest = copy(items = items ++ __vs)
    def withItems(__v: scala.collection.Seq[com.echo.protocol.product.ItemInfo]): OrderRequest = copy(items = __v)
    def withPayMethod(__v: com.echo.protocol.gold.PayMethod): OrderRequest = copy(payMethod = __v)
    def withDeliverMethod(__v: com.echo.protocol.gold.DeliverMethod): OrderRequest = copy(deliverMethod = __v)
    def withRecipientsName(__v: String): OrderRequest = copy(recipientsName = __v)
    def withRecipientsPhone(__v: String): OrderRequest = copy(recipientsPhone = __v)
    def withRecipientsAddress(__v: String): OrderRequest = copy(recipientsAddress = __v)
    def withRecipientsPostcode(__v: String): OrderRequest = copy(recipientsPostcode = __v)
    def withComment(__v: String): OrderRequest = copy(comment = __v)
    def clearCouponId = copy(couponId = scala.collection.Seq.empty)
    def addCouponId(__vs: String*): OrderRequest = addAllCouponId(__vs)
    def addAllCouponId(__vs: TraversableOnce[String]): OrderRequest = copy(couponId = couponId ++ __vs)
    def withCouponId(__v: scala.collection.Seq[String]): OrderRequest = copy(couponId = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = userId
          if (__t != "") __t else null
        }
        case 2 => items
        case 5 => {
          val __t = payMethod.valueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 6 => {
          val __t = deliverMethod.valueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 7 => {
          val __t = recipientsName
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = recipientsPhone
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = recipientsAddress
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = recipientsPostcode
          if (__t != "") __t else null
        }
        case 11 => {
          val __t = comment
          if (__t != "") __t else null
        }
        case 12 => couponId
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.echo.protocol.gold.OrderRequest
}

object OrderRequest extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.echo.protocol.gold.OrderRequest] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.echo.protocol.gold.OrderRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.gold.OrderRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.echo.protocol.gold.OrderRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[scala.collection.Seq[com.echo.protocol.product.ItemInfo]],
      com.echo.protocol.gold.PayMethod.fromValue(__fieldsMap.getOrElse(__fields.get(2), com.echo.protocol.gold.PayMethod.PAY_METHOD_EMPTY.valueDescriptor).asInstanceOf[com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      com.echo.protocol.gold.DeliverMethod.fromValue(__fieldsMap.getOrElse(__fields.get(3), com.echo.protocol.gold.DeliverMethod.DELIVER_METHOD_EMPTY.valueDescriptor).asInstanceOf[com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(7), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(8), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(9), Nil).asInstanceOf[scala.collection.Seq[String]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = GoldProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 2 => __out = com.echo.protocol.product.ItemInfo
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    __field.getNumber match {
      case 5 => com.echo.protocol.gold.PayMethod
      case 6 => com.echo.protocol.gold.DeliverMethod
    }
  }
  lazy val defaultInstance = com.echo.protocol.gold.OrderRequest(
  )
  implicit class OrderRequestLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.gold.OrderRequest]) extends com.trueaccord.lenses.ObjectLens[UpperPB, com.echo.protocol.gold.OrderRequest](_l) {
    def userId: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def items: com.trueaccord.lenses.Lens[UpperPB, scala.collection.Seq[com.echo.protocol.product.ItemInfo]] = field(_.items)((c_, f_) => c_.copy(items = f_))
    def payMethod: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.gold.PayMethod] = field(_.payMethod)((c_, f_) => c_.copy(payMethod = f_))
    def deliverMethod: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.gold.DeliverMethod] = field(_.deliverMethod)((c_, f_) => c_.copy(deliverMethod = f_))
    def recipientsName: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.recipientsName)((c_, f_) => c_.copy(recipientsName = f_))
    def recipientsPhone: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.recipientsPhone)((c_, f_) => c_.copy(recipientsPhone = f_))
    def recipientsAddress: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.recipientsAddress)((c_, f_) => c_.copy(recipientsAddress = f_))
    def recipientsPostcode: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.recipientsPostcode)((c_, f_) => c_.copy(recipientsPostcode = f_))
    def comment: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.comment)((c_, f_) => c_.copy(comment = f_))
    def couponId: com.trueaccord.lenses.Lens[UpperPB, scala.collection.Seq[String]] = field(_.couponId)((c_, f_) => c_.copy(couponId = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val ITEMS_FIELD_NUMBER = 2
  final val PAY_METHOD_FIELD_NUMBER = 5
  final val DELIVER_METHOD_FIELD_NUMBER = 6
  final val RECIPIENTS_NAME_FIELD_NUMBER = 7
  final val RECIPIENTS_PHONE_FIELD_NUMBER = 8
  final val RECIPIENTS_ADDRESS_FIELD_NUMBER = 9
  final val RECIPIENTS_POSTCODE_FIELD_NUMBER = 10
  final val COMMENT_FIELD_NUMBER = 11
  final val COUPON_ID_FIELD_NUMBER = 12
}
