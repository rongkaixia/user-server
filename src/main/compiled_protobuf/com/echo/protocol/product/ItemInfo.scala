// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.echo.protocol.product



/** @param skuId
  *  商品 sku id
  * @param num
  *  商品数量
  * @param price
  *   商品原始单价
  * @param realPrice
  *   商品实际单价，促销等情况
  * @param discount
  *   优惠，例如两件以上减200块之类的，如-100
  * @param total
  *   总价, total = real_price * num + discount
  */
@SerialVersionUID(0L)
final case class ItemInfo(
    skuId: String = "",
    num: Int = 0,
    price: Double = 0.0,
    realPrice: Double = 0.0,
    discount: Double = 0.0,
    total: Double = 0.0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ItemInfo] with com.trueaccord.lenses.Updatable[ItemInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (skuId != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, skuId) }
      if (num != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(3, num) }
      if (price != 0.0) { __size += com.google.protobuf.CodedOutputStream.computeDoubleSize(4, price) }
      if (realPrice != 0.0) { __size += com.google.protobuf.CodedOutputStream.computeDoubleSize(5, realPrice) }
      if (discount != 0.0) { __size += com.google.protobuf.CodedOutputStream.computeDoubleSize(6, discount) }
      if (total != 0.0) { __size += com.google.protobuf.CodedOutputStream.computeDoubleSize(7, total) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = skuId
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = num
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = price
        if (__v != 0.0) {
          _output__.writeDouble(4, __v)
        }
      };
      {
        val __v = realPrice
        if (__v != 0.0) {
          _output__.writeDouble(5, __v)
        }
      };
      {
        val __v = discount
        if (__v != 0.0) {
          _output__.writeDouble(6, __v)
        }
      };
      {
        val __v = total
        if (__v != 0.0) {
          _output__.writeDouble(7, __v)
        }
      };
    }
    def mergeFrom(`_input__`: com.google.protobuf.CodedInputStream): com.echo.protocol.product.ItemInfo = {
      var __skuId = this.skuId
      var __num = this.num
      var __price = this.price
      var __realPrice = this.realPrice
      var __discount = this.discount
      var __total = this.total
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __skuId = _input__.readString()
          case 24 =>
            __num = _input__.readInt32()
          case 33 =>
            __price = _input__.readDouble()
          case 41 =>
            __realPrice = _input__.readDouble()
          case 49 =>
            __discount = _input__.readDouble()
          case 57 =>
            __total = _input__.readDouble()
          case tag => _input__.skipField(tag)
        }
      }
      com.echo.protocol.product.ItemInfo(
          skuId = __skuId,
          num = __num,
          price = __price,
          realPrice = __realPrice,
          discount = __discount,
          total = __total
      )
    }
    def withSkuId(__v: String): ItemInfo = copy(skuId = __v)
    def withNum(__v: Int): ItemInfo = copy(num = __v)
    def withPrice(__v: Double): ItemInfo = copy(price = __v)
    def withRealPrice(__v: Double): ItemInfo = copy(realPrice = __v)
    def withDiscount(__v: Double): ItemInfo = copy(discount = __v)
    def withTotal(__v: Double): ItemInfo = copy(total = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 2 => {
          val __t = skuId
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = num
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = price
          if (__t != 0.0) __t else null
        }
        case 5 => {
          val __t = realPrice
          if (__t != 0.0) __t else null
        }
        case 6 => {
          val __t = discount
          if (__t != 0.0) __t else null
        }
        case 7 => {
          val __t = total
          if (__t != 0.0) __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.echo.protocol.product.ItemInfo
}

object ItemInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.echo.protocol.product.ItemInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.echo.protocol.product.ItemInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.echo.protocol.product.ItemInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.echo.protocol.product.ItemInfo(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), 0.0).asInstanceOf[Double],
      __fieldsMap.getOrElse(__fields.get(3), 0.0).asInstanceOf[Double],
      __fieldsMap.getOrElse(__fields.get(4), 0.0).asInstanceOf[Double],
      __fieldsMap.getOrElse(__fields.get(5), 0.0).asInstanceOf[Double]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ProductProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.echo.protocol.product.ItemInfo(
  )
  implicit class ItemInfoLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, com.echo.protocol.product.ItemInfo]) extends com.trueaccord.lenses.ObjectLens[UpperPB, com.echo.protocol.product.ItemInfo](_l) {
    def skuId: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.skuId)((c_, f_) => c_.copy(skuId = f_))
    def num: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.num)((c_, f_) => c_.copy(num = f_))
    def price: com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.price)((c_, f_) => c_.copy(price = f_))
    def realPrice: com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.realPrice)((c_, f_) => c_.copy(realPrice = f_))
    def discount: com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.discount)((c_, f_) => c_.copy(discount = f_))
    def total: com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.total)((c_, f_) => c_.copy(total = f_))
  }
  final val SKU_ID_FIELD_NUMBER = 2
  final val NUM_FIELD_NUMBER = 3
  final val PRICE_FIELD_NUMBER = 4
  final val REAL_PRICE_FIELD_NUMBER = 5
  final val DISCOUNT_FIELD_NUMBER = 6
  final val TOTAL_FIELD_NUMBER = 7
}
